const express=require("express"),path=require("path"),fs=require("fs"),session=require("express-session"),bcrypt=require("bcryptjs"),sqlite3=require("sqlite3").verbose(),crypto=require("crypto"),nodemailer=require("nodemailer"),helmet=require("helmet"),compression=require("compression"),rateLimit=require("express-rate-limit");const app=express(),port=process.env.PORT||3000;app.set("trust proxy",1),app.use(helmet({crossOriginResourcePolicy:{policy:"same-site"}})),"production"===process.env.NODE_ENV&&app.use(((e,s,t)=>{s.setHeader("Strict-Transport-Security","max-age=31536000; includeSubDomains; preload"),t()})),app.use(compression());const CANONICAL=process.env.CANONICAL_HOST;app.use(((e,s,t)=>{return CANONICAL&&e.headers.host&&e.headers.host!==CANONICAL?s.redirect(301,`https://${CANONICAL}${e.originalUrl}`):void t()}));const DATA_DIR=process.env.DATA_DIR||path.join(__dirname,"data");fs.existsSync(DATA_DIR)||fs.mkdirSync(DATA_DIR,{recursive:!0});const DB_FILE=process.env.DB_FILE||path.join(DATA_DIR,"ordeminds.db"),db=new sqlite3.Database(DB_FILE);db.serialize((()=>{db.run("CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, email TEXT NOT NULL UNIQUE, password_hash TEXT NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP )"),db.run("CREATE TABLE IF NOT EXISTS tasks ( id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, title TEXT NOT NULL, completed INTEGER DEFAULT 0, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(user_id) REFERENCES users(id) )"),db.run("CREATE TABLE IF NOT EXISTS password_resets ( id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, token_hash TEXT NOT NULL, expires_at DATETIME NOT NULL, used INTEGER DEFAULT 0, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(user_id) REFERENCES users(id) )")})),app.use(express.json()),app.use(express.urlencoded({extended:!0})),app.use(session({secret:process.env.SESSION_SECRET||"CHANGE-ME-SECRET",resave:!1,saveUninitialized:!1,cookie:{httpOnly:!0,sameSite:"lax",secure:"production"===process.env.NODE_ENV}}));const transporter=nodemailer.createTransport({host:process.env.SMTP_HOST||"localhost",port:parseInt(process.env.SMTP_PORT||"25",10),secure:"true"===process.env.SMTP_SECURE,auth:process.env.SMTP_USER&&process.env.SMTP_PASS?{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS}:void 0}),APP_BASE_URL=process.env.APP_BASE_URL||`http://localhost:${port}`,MAIL_FROM=process.env.MAIL_FROM||"no-reply@ordeminds.local";app.use("/assets",express.static(path.join(__dirname,"public","assets"),{maxAge:"7d",immutable:!0})),app.use("/",express.static(path.join(__dirname,"public")));function requireAuth(e,s,t){return e.session.user?t():s.status(401).json({error:"not_authenticated"})}const limiterAuth=rateLimit({windowMs:6e4,max:20}),limiterForgot=rateLimit({windowMs:6e4,max:6});app.get("/login",((e,s)=>s.sendFile(path.join(__dirname,"public","login.html")))),app.get("/signup",((e,s)=>s.sendFile(path.join(__dirname,"public","signup.html")))),app.get("/forgot",((e,s)=>s.sendFile(path.join(__dirname,"public","forgot.html")))),app.get("/reset",((e,s)=>s.sendFile(path.join(__dirname,"public","reset.html")))),app.get("/app",((e,s)=>e.session.user?s.sendFile(path.join(__dirname,"public","app.html")):s.redirect("/login"))),app.get("/api/health",((e,s)=>s.json({status:"ok",uptime:process.uptime()}))),app.get("/api/me",((e,s)=>s.json({user:e.session.user||null}))),app.post("/signup",limiterAuth,((e,s)=>{const{ name:t,email:o,password:r,confirm:a }=e.body||{};if(!t||!o||!r||r!==a)return s.status(400).send("Dados inválidos");const n=bcrypt.hashSync(r,10),i=db.prepare("INSERT INTO users (name, email, password_hash) VALUES (?, ?, ?)");i.run(t.trim(),o.trim().toLowerCase(),n,(function(e){if(e)return s.status(400).send(e.message.includes("UNIQUE")?"E-mail já cadastrado":"Erro ao cadastrar");s.session.user={id:this.lastID,name:t,email:o.trim().toLowerCase()},s.redirect("/app")}))})),app.post("/login",limiterAuth,((e,s)=>{const{ email:t,password:o }=e.body||{};return t&&o?void db.get("SELECT * FROM users WHERE email = ?",[t.trim().toLowerCase()],((e,t)=>{if(e||!t)return s.status(400).send("Credenciais inválidas");if(!bcrypt.compareSync(o,t.password_hash))return s.status(400).send("Credenciais inválidas");e.session.user={id:t.id,name:t.name,email:t.email},s.redirect("/app")})):s.status(400).send("Informe e-mail e senha")})),app.post("/logout",((e,s)=>{e.session.destroy((()=>s.redirect("/")))})),app.post("/forgot",limiterForgot,((e,s)=>{const{ email:t }=e.body||{};if(!t)return s.status(200).send("Se o e-mail existir, enviaremos instruções.");db.get("SELECT id FROM users WHERE email = ?",[t.trim().toLowerCase()],(async(e,o)=>{const r=()=>s.status(200).send("Se o e-mail existir, enviaremos instruções.");if(e||!o)return r();const a=crypto.randomBytes(32).toString("hex"),n=crypto.createHash("sha256").update(a).digest("hex"),i=new Date(Date.now()+18e5).toISOString();db.run("INSERT INTO password_resets (user_id, token_hash, expires_at) VALUES (?, ?, ?)",[o.id,n,i],(async()=>{const e=`${APP_BASE_URL}/reset?token=${a}&email=${encodeURIComponent(t.trim().toLowerCase())}`;try{await transporter.sendMail({from:MAIL_FROM,to:t.trim().toLowerCase(),subject:"Ordeminds — Redefinição de senha",text:`Para redefinir sua senha, acesse: ${e} (válido por 30 minutos).`,html:`<p>Para redefinir sua senha, clique abaixo (válido por 30 minutos):</p><p><a href="${e}" style="background:#1AC6B2;color:#001;padding:10px 16px;border-radius:8px;text-decoration:none;font-weight:700">Redefinir senha</a></p><p>Se você não solicitou, ignore este e-mail.</p>`})}catch(e){console.error("Email send failed:",e.message)}r()}))}))})),app.post("/reset",limiterForgot,((e,s)=>{const{ token:t,email:o,password:r,confirm:a }=e.body||{};if(!t||!o||!r||r!==a)return s.status(400).send("Dados inválidos");const n=crypto.createHash("sha256").update(t).digest("hex");db.get("SELECT pr.id, pr.user_id, pr.expires_at, pr.used FROM password_resets pr JOIN users u ON u.id = pr.user_id AND u.email = ? WHERE pr.token_hash = ? ORDER BY pr.id DESC LIMIT 1",[o.trim().toLowerCase(),n],((t,a)=>{if(t||!a)return s.status(400).send("Token inválido");if(a.used)return s.status(400).send("Token já utilizado");if(new Date(a.expires_at)<new Date)return s.status(400).send("Token expirado");const n=bcrypt.hashSync(r,10);db.run("UPDATE users SET password_hash = ? WHERE id = ?",[n,a.user_id],(t=>t?s.status(500).send("Erro ao atualizar senha"):void db.run("UPDATE password_resets SET used = 1 WHERE id = ?",[a.id],(()=>s.redirect("/login")))))}))})),app.get("/api/tasks",requireAuth,((e,s)=>{db.all("SELECT * FROM tasks WHERE user_id = ? ORDER BY id DESC",[e.session.user.id],((e,t)=>e?s.status(500).json({error:"db_error"}):s.json(t)))})),app.post("/api/tasks",requireAuth,((e,s)=>{const{ title:t }=e.body||{};if(!t)return s.status(400).json({error:"title_required"});const o=db.prepare("INSERT INTO tasks (user_id, title) VALUES (?, ?)");o.run(e.session.user.id,t.trim(),(function(e){return e?s.status(500).json({error:"db_error"}):s.status(201).json({id:this.lastID,title:t.trim(),completed:0})}))})),app.patch("/api/tasks/:id",requireAuth,((e,s)=>{const t=e.body||{},o=parseInt(e.params.id,10);return Number.isNaN(o)?s.status(400).json({error:"invalid_id"}):void db.run("UPDATE tasks SET completed = ? WHERE id = ? AND user_id = ?",[t.completed?1:0,o,e.session.user.id],(function(e){return e?s.status(500).json({error:"db_error"}):s.json({updated:this.changes})}))})),app.delete("/api/tasks/:id",requireAuth,((e,s)=>{const t=parseInt(e.params.id,10);return Number.isNaN(t)?s.status(400).json({error:"invalid_id"}):void db.run("DELETE FROM tasks WHERE id = ? AND user_id = ?",[t,e.session.user.id],(function(e){return e?s.status(500).json({error:"db_error"}):s.json({deleted:this.changes})}))})),app.listen(port,(()=>console.log(`Ordeminds v2 on :${port}`)));